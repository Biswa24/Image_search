{"version":3,"sources":["components/SearchComponents.js","components/ImageComponents.js","components/NextComponents.js","App.js","serviceWorker.js","index.js"],"names":["SearchComponent","props","onChangeListener","bind","onSubmitListener","state","key","event","this","setState","target","value","preventDefault","sendKey","className","onSubmit","type","placeholder","onChange","Component","ImageComponent","console","log","currentTarget","getAttribute","pId","document","getElementById","style","display","imageList","map","single","index","padding","alt","src","urls","regular","width","height","onClick","onClickListener","data-id","id","description","App","getSearchKey","axios","get","params","client_id","query","per_page","page","result","data","results","page_no","total_pages","length","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRA8CeA,E,YA3CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAExB,EAAKE,MAAQ,CAACC,IAAK,IANJ,E,8EASFC,GACbC,KAAKC,SAAS,CAACH,IAAKC,EAAMG,OAAOC,U,uCAGpBJ,GACbA,EAAMK,iBACNJ,KAAKP,MAAMY,QAAQL,KAAKH,MAAMC,O,+BAG9B,OACI,yBAAKQ,UAAU,aACX,6BACA,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,6BACX,0BAAMA,UAAU,eAAeC,SAAUP,KAAKJ,kBAC1C,yBAAKU,UAAU,+CACX,yBAAKA,UAAU,YACX,uBAAGA,UAAU,gCAEjB,yBAAKA,UAAU,OACX,2BAAOA,UAAU,uDAAuDE,KAAK,SAASC,YAAY,4BAA4BC,SAAUV,KAAKN,oBAEjJ,yBAAKY,UAAU,YACX,4BAAQA,UAAU,yBAA0BE,KAAK,UAAjD,oB,GAjCNG,aC0BfC,E,wLAzBKb,GACZc,QAAQC,IAAIf,EAAMgB,cAAcC,aAAa,YAC7C,IAAMC,EAAMC,SAASC,eAAepB,EAAMgB,cAAcC,aAAa,YACrEC,EAAIG,MAAMC,QAAgC,SAAtBJ,EAAIG,MAAMC,QAAqB,GAAK,S,+BAElD,IAAD,OACL,OACI,yBAAKf,UAAU,aACX,6BACA,yBAAKA,UAAU,OACVN,KAAKP,MAAM6B,UAAUC,KAAI,SAACC,EAAQC,GAC/B,OACI,yBAAKnB,UAAU,WAAWc,MAAO,CAACM,QAAS,QAAS5B,IAAK2B,GACrD,yBAAKE,IAAI,MAAMC,IAAKJ,EAAOK,KAAKC,QAASC,MAAM,MAAMC,OAAO,UAC5D,4BAAQ1B,UAAU,yBAAyB2B,QAAS,EAAKC,gBAAiBC,UAASV,GAAnF,eACA,uBAAGW,GAAIX,EAAOL,MAAO,CAACC,QAAQ,SAAUG,EAAOa,uB,GAhBlD1B,a,GCADA,Y,sBC2Cb2B,E,YApCb,WAAY7C,GAAQ,IAAD,8BACjB,4CAAMA,KAED8C,aAAe,EAAKA,aAAa5C,KAAlB,gBAEpB,EAAKE,MAAQ,CAACyB,UAAW,IALR,E,mHAQAxB,G,yFACI0C,IAAMC,IAAI,0CAA2C,CACxEC,OAAQ,CACNC,UAAW,8CACXC,MAAO9C,EACP+C,SAAS,GACTC,KAAM,K,OALJC,E,OAQN/C,KAAKC,SAAS,CAACqB,UAAWyB,EAAOC,KAAKC,UAChCC,EAAUH,EAAOC,KAAKG,YAC5BtC,QAAQC,IAAIiC,EAAOC,KAAKE,G,sIAGxB,OACE,6BACE,kBAAC,EAAD,CAAiB7C,QAASL,KAAKuC,eAE9BvC,KAAKH,MAAMyB,UAAU8B,OAAS,GAC7B,kBAAC,EAAD,CAAgB9B,UAAWtB,KAAKH,MAAMyB,UAAW4B,QAAWlD,KAAKH,MAAMiD,Y,GA5B/DnC,aCIE0C,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAASC,eAAe,SD6HzC,kBAAmByC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.f2beaebf.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass SearchComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onChangeListener = this.onChangeListener.bind(this);\n        this.onSubmitListener = this.onSubmitListener.bind(this);\n\n        this.state = {key: ''};\n    }\n\n    onChangeListener(event) {\n        this.setState({key: event.target.value});\n    }\n\n    onSubmitListener(event) {\n        event.preventDefault();\n        this.props.sendKey(this.state.key);\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <br />\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-12 col-md-10 col-lg-8\">\n                        <form className=\"card card-sm\" onSubmit={this.onSubmitListener}>\n                            <div className=\"card-body row no-gutters align-items-center\">\n                                <div className=\"col-auto\">\n                                    <i className=\"fas fa-search h4 text-body\" />\n                                </div>\n                                <div className=\"col\">\n                                    <input className=\"form-control form-control-lg form-control-borderless\" type=\"search\" placeholder=\"Search topics or keywords\" onChange={this.onChangeListener}/>\n                                </div>\n                                <div className=\"col-auto\">\n                                    <button className=\"btn btn-lg btn-warning\"  type=\"submit\">Search</button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchComponent;","import React, {Component} from 'react';\n\nclass ImageComponent extends Component {\n    onClickListener(event) {\n        console.log(event.currentTarget.getAttribute('data-id'));\n        const pId = document.getElementById(event.currentTarget.getAttribute('data-id'));\n        pId.style.display = pId.style.display === 'none' ? '' : 'none';\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <br />\n                <div className=\"row\">\n                    {this.props.imageList.map((single, index) => {\n                        return(\n                            <div className=\"col-lg-4\" style={{padding: '10px'}} key={index}>\n                                <img alt='Img' src={single.urls.regular} width=\"30%\" height=\"300px\"/>\n                                <button className=\"btn btn-sm btn-warning\" onClick={this.onClickListener} data-id={index}>Description</button>\n                                <p id={index} style={{display:'none'}}>{single.description}</p>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ImageComponent;","import React, {Component} from 'react';\n\nclass NextComponent extends Component {\n\tonClickListener() {\n        console.log(this.state.page_no)\n    }\n    render() {\n    \treturn (\n            <div className=\"container\">\n                <br />                \n                <div className=\"row\">\n                \tconsole.log(\"gi\")\n                \t<button className=\"btn btn-lg btn-warning\" onClick={this.onClickListener}> Next </button>\n               </div>\n            </div>\n        );\n    }\n}\n\nexport default NextComponent;","import React, { Component } from 'react';\nimport SearchComponent from './components/SearchComponents';\nimport ImageComponent from './components/ImageComponents';\nimport NextComponent from './components/NextComponents';\nimport './App.css';\nimport axios from 'axios';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getSearchKey = this.getSearchKey.bind(this);\n\n    this.state = {imageList: []};\n  }\n\n  async getSearchKey(key) {\n    const result = await axios.get(\"https://api.unsplash.com/search/photos/\", {\n      params: {\n        client_id: 'JtJUuQU0jrjq8T7EtvP136HlR5ppvpvhqXM0f0_j_1A',\n        query: key,\n        per_page:15,\n        page :1\n      }\n    });\n    this.setState({imageList: result.data.results});\n    const page_no = result.data.total_pages;\n    console.log(result.data,page_no);\n  }\n  render() {\n    return(\n      <div>\n        <SearchComponent sendKey={this.getSearchKey}/>\n\n        {this.state.imageList.length > 0&&\n          <ImageComponent imageList={this.state.imageList} page_no = {this.state.page}/>\n        }\n        {/* <NextComponent page_no = {this.state.page}/> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}